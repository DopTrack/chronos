#!/bin/sh
### BEGIN INIT INFO
# Provides:          doptrackwebappserver
# Required-Start:    $local_fs $network $named $time $syslog
# Required-Stop:     $local_fs $network $named $time $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       Remote\ server\ part\ of\ webapp\,\ using\ doptrack\ scripts
### END INIT INFO

###  NOTE: Inhoud van restartService.sh  moet worden overgenomen in dit script.     
#   mv "/webappservercontrol" "/etc/init.d/doptrackwebappserver"
#   chmod +x /etc/init.d/doptrackwebappserver
#   sudo touch "/var/log/doptrackwebappserver.log" && sudo chown "rvandenberg" "/var/log/doptrackwebappserver.log"
#   sudo touch "/var/log/pythonDoptrackServer.log" && sudo chown "rvandenberg" "/var/log/pythonDoptrackServer.log"
#   sudo update-rc.d "doptrackwebappserver" defaults
#   sudo service "doptrackwebappserver" start



NAME=doptrackwebappserver
FILES="DoptrackControlService.py DoptrackMonitorService.py ReceiverService.py"
# SCRIPT="python2 /opt/$NAME/DoptrackControlService.py"
# SCRIPT="/opt/$NAME/DoptrackControlService.py"
RUNAS=root
TIMESTAMP=`date "+%Y-%m-%d %H:%M:%S"`

PIDFILE="/var/run/$NAME.pid"
LOGFILE="/var/log/$NAME.log"

echo $LOGFILE

start() {
  if [ -f $PIDFILE ] && [ -s $PIDFILE ] && kill -0 $(cat $PIDFILE); then
    echo 'Service already running' >&2
    return 1
  fi

  # echo 'Starting service…' >&2
  # # local CMD="python2 $SCRIPT &>> $LOGFILE & echo \$!"     
  # local CMD="python2 $SCRIPT & echo \$!"
  # su -c "$CMD" $RUNAS >> "$PIDFILE"
  
  echo 'Starting service…' >&2
  for FILE in $FILES
  do
    local CMD="python2 /opt/$NAME/$FILE & echo \$!"
    su -c "$CMD" $RUNAS >> "$PIDFILE"    

    sleep 1
    PID=$(tail -n 1 $PIDFILE)
      if pgrep -u $RUNAS -f $NAME > /dev/null
      then
        echo "$FILE is now running, the PID is $PID"
        echo "$TIMESTAMP $FILE is running with PID $PID" >> $LOGFILE
      else
        echo ''
        echo "Error! Could not start $NAME!"
        echo "$TIMESTAMP $FILE could not be started" >> $LOGFILE
      fi
    done
}

stop() {
  if [ ! -f "$PIDFILE" ] || ! kill -0 $(cat "$PIDFILE"); then
    echo 'Service not running' >&2
    return 1
  fi
  
  echo 'Stopping service…' >&2
  kill -15 $(cat "$PIDFILE") && rm -f "$PIDFILE"
  echo 'Service stopped' >&2
}

uninstall() {
  echo -n "Are you really sure you want to stop and uninstall this service? That cannot be undone. [yes|No] "
  local SURE
  read SURE
  if [ "$SURE" = "yes" ]; then
    stop
    rm -f "$PIDFILE"
    echo "Notice: log file is not to be removed: '$LOGFILE'" >&2
    update-rc.d -f "$NAME" remove
    rm -fv "$0"
  fi
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  uninstall)
    stop
    uninstall
    ;;
  restart)
    stop
    start
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|uninstall}"
esac

